# This test posts various names to the reader and checks that invalid names do not post.
# It also checks that returned name is what was posted.

from pytest_check.check_methods import check_func
import requests
import json
from requests.models import Response
import pytest_check as check

import sys
import pytest
import time

sys.path.append('..')
from common.shared import factory_reset, ssl_reset

params = {
    "Valid Name 1": (202, {"name": "***"}),
    "Valid Name 2": (202, {"name": "Brand New Reader Name"}),
    "Valid Name 3": (202, {"name": "Yet Another New Reader Name"}),
    "Name int": (202, {"name": "-1"}),
    "Name too long": (400, {"name}),
    "Leading spaces": (202, {"name": "   ***"}),
    "Trailing spaces": (202, {"name": "***    "}),
    "Encapsulating spaces": (202, {"name": "   ***   "}),
    "Reset Name": (202, {"name": "***"}),
    }

def poster(message, err, payload, args, ver):
    response = requests.post(
         "{}/***/v0/reader/name".format(sec),
         headers={"Authorization": "Bearer " + args["serial"]},
         json=payload,
         timeout=args['timeout'], verify=ver
         )
    print(message, "==>", payload)
    if err == response.status_code and response.status_code >= 200 and response.status_code < 210:
        getter(message,payload, args, ver)
    else:
        check.equal(err, response.status_code, message)

def getter(message, payload, args, ver):
    response = requests.get(
         "{}/***/v0/reader/name".format(sec),
         headers={"Authorization": "Bearer " + args["serial"]},
         timeout=args['timeout'], verify=ver
         )
    response_body = response.json()
    #print(json.dumps(response_body, indent=2))
    check.equal(payload, response_body, message)

def unpacker(params, args, ver):
    test_count = 0
    for x, y in params.items():
        message = x
        err = y[0]
        payload = y[1]         
        poster(message, err, payload, args, ver)
        test_count += 1
    return test_count

def test_name(ip, serial, tout, do_reset, ssl, ver):
    args = {"ip":ip, "serial":serial, "timeout":tout}
    global sec
    sec = "http{}://{}".format(str(ssl), args['ip'])
    do_reset = True
    if "s" in sec:
        ssl_reset(args, ssl, ver)
    if do_reset and "s" not in sec:
        factory_reset(args)
    print("")
    test_count = unpacker(params, args, ver)
    print("")
    print("Ran ", test_count, " tests")


